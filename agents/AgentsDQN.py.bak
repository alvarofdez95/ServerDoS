# -*- coding: utf-8 -*-
"""
Created on Tue Dec 19 10:50:50 2023

@author: jafernandez
"""

import numpy as np
import torch as T
from vicomrl.NeuralNetwork import DeepQNetwork, DuelingDeepQNetwork
from vicomrl.ReplayBuffer import ReplayBuffer
import os

class Agent():
    def __init__(self, config, n_actions, n_observations, chkpt_dir='tmp/dqn'):
        """
        

        Parameters
        ----------
        config : TYPE
            DESCRIPTION.
        n_actions : TYPE
            DESCRIPTION.
        n_observations : TYPE
            DESCRIPTION.
        chkpt_dir : TYPE, optional
            DESCRIPTION. The default is 'tmp/dqn'.

        Returns
        -------
        None.

        """
        self.gamma = eval(config['gamma'])
        self.epsilon_ini = eval(config['epsilon'])
        self.epsilon = eval(config['epsilon'])
        self.eps_min = eval(config['epsilon_min'])
        self.eps_dec = eval(config['epsilon_decay_rate'])
        self.lr = eval(config['lr'])
        self.hidden_layer_dim = eval(config['hidden_dim'])
        self.n_actions = n_actions
        self.input_dims = np.zeros(n_observations).shape
        self.batch_size = eval(config['batch_size'])
        self.buffer_size = eval(config['buffer_size'])
        self.replace_target_cnt = eval(config['replace_target_network'])
        self.algo = config['algorithm']
        self.env_name = config['env_name']
        self.chkpt_dir = chkpt_dir
        self.action_space = [i for i in range(self.n_actions)]
        self.learn_step_counter = 0
        
        if not os.path.exists(self.chkpt_dir):
            try:
                # Si no existe, crear el directorio
                os.makedirs(self.chkpt_dir)
                print(f"Directorio creado: {self.chkpt_dir}")
            except OSError as e:
                print(f"Error al crear el directorio: {e}")
        else:
            print("exists")
        
        self.memory = ReplayBuffer(self.buffer_size, self.input_dims, self.n_actions)
    
    def choose_action(self, observation):
        """
        

        Parameters
        ----------
        observation : TYPE
            DESCRIPTION.

        Raises
        ------
        NotImplementedError
            DESCRIPTION.

        Returns
        -------
        None.

        """
        
        raise NotImplementedError

    def store_transition(self, state, action, reward, state_, terminated, truncated):
        """
        

        Parameters
        ----------
        state : TYPE
            DESCRIPTION.
        action : TYPE
            DESCRIPTION.
        reward : TYPE
            DESCRIPTION.
        state_ : TYPE
            DESCRIPTION.
        terminated : TYPE
            DESCRIPTION.
        truncated : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        self.memory.store_transition(state, action, reward, state_, terminated, truncated)
    
    def sample_memory(self):
        """
        

        Returns
        -------
        states : TYPE
            DESCRIPTION.
        actions : TYPE
            DESCRIPTION.
        rewards : TYPE
            DESCRIPTION.
        states_ : TYPE
            DESCRIPTION.
        terminateds : TYPE
            DESCRIPTION.
        truncateds : TYPE
            DESCRIPTION.

        """
        
        state, action, reward, new_state, terminated, truncated = self.memory.sample_buffer(self.batch_size)
        
        states = T.tensor(state).to(self.q_eval.device)
        rewards = T.tensor(reward).to(self.q_eval.device)
        terminateds = T.tensor(terminated).to(self.q_eval.device)
        truncateds = T.tensor(truncated).to(self.q_eval.device)
        actions = T.tensor(action).to(self.q_eval.device)
        states_ = T.tensor(new_state).to(self.q_eval.device)
        
        return states, actions, rewards, states_, terminateds, truncateds
    
    def replace_target_network(self):
        """
        

        Returns
        -------
        None.

        """
        if self.learn_step_counter % self.replace_target_cnt == 0:
            self.q_next.load_state_dict(self.q_eval.state_dict())
            
    def decrement_epsilon(self, progress):
        """
        Bajar epsilon de forma lineal, en función del episodio actual.
        epsilon_inicial = self.epsilon_ini
        epsilon_final = self.eps_min
        progress = episodio actual / episodios totales del entrenamiento
        """
        #self.epsilon = self.epsilon - self.eps_dec if self.epsilon > self.eps_min else self.eps_min
        self.epsilon = self.epsilon_ini - progress * (self.epsilon_ini - self.eps_min)
    
    def save_models(self, name):
        """
        

        Parameters
        ----------
        name : TYPE
            DESCRIPTION.

        Returns
        -------
        None.

        """
        self.q_eval.save_checkpoint(name)
        self.q_next.save_checkpoint(name)
    
    def load_models(self, name):
        """
        

        Returns
        -------
        None.

        """
        self.q_eval.load_model(name)
        self.q_next.load_model(name)
    
    def learn(self):
        """
        

        Raises
        ------
        NotImplementedError
            DESCRIPTION.

        Returns
        -------
        None.

        """
        
        raise NotImplementedError

class DQNAgent(Agent):
    def __init__(self, *args, **kargs):
        super(DQNAgent,self).__init__(*args, **kargs)
        
        self.q_eval = DeepQNetwork(self.lr, self.n_actions,
                                   hidden_layer_dim = self.hidden_layer_dim,
                                   name=self.env_name+'_'+self.algo+'_q_eval',
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
        self.q_next = DeepQNetwork(self.lr, self.n_actions,
                                   hidden_layer_dim = self.hidden_layer_dim,
                                   name=self.env_name+'_'+self.algo+'_q_next',                                
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
    def choose_action(self, observation, mask=False, actions_impossibles=None):
        """
        Elegir acción, al azar o por el agente.
        Si hay acciones imposibles, se debe pasar el set de acciones posibles
        como argumento, para que no se escoja una acción no posible

        Parameters
        ----------
        observation : TYPE
            DESCRIPTION.
        actions_possibles : TYPE, optional
            DESCRIPTION. The default is None.

        Returns
        -------
        action : TYPE
            DESCRIPTION.

        """
        
        if np.random.random() > self.epsilon:
            state = T.tensor(observation[np.newaxis, :], dtype=T.float, device=self.q_eval.device)
            actions = self.q_eval.forward(state)
            if mask:
                actions[0][actions_impossibles] = -np.inf
                action = T.argmax(actions).item()
            else: action = T.argmax(actions).item()
        else:
            if mask:
                actions = np.arange(self.n_actions)
                actions = np.delete(actions, actions_impossibles)
                action = np.random.choice(actions)
            else: action = np.random.choice(self.action_space)
        
        return action
    
    def learn(self):
        """
        

        Returns
        -------
        None.

        """
        
        
        if self.memory.mem_cntr < self.batch_size:
            return
        
        self.q_eval.optimizer.zero_grad()
        
        self.replace_target_network()
        
        states, actions, rewards, states_, terminateds, truncateds = self.sample_memory()
        
        indices = np.arange(self.batch_size)
        q_pred = self.q_eval.forward(states)[indices, actions]
        q_next = self.q_next.forward(states_).max(dim=1)[0]
                
        q_next[terminateds.bool()] = 0.0
        q_next[truncateds.bool()] = 0.0
        

        #if terminateds.any()==1 or truncateds.any()==1:
        #    print(q_next, terminateds, truncateds)
        
        q_target = rewards + self.gamma*q_next 
        
        loss = self.q_eval.loss(q_target, q_pred).to(self.q_eval.device)
        loss.backward()
        self.q_eval.optimizer.step()
        self.learn_step_counter += 1
        
        #self.decrement_epsilon()

class DoubleDQNAgent(Agent):
    def __init__(self, *args, **kargs):
        super(DoubleDQNAgent,self).__init__(*args, **kargs)
        
        self.q_eval = DeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_eval', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
        self.q_next = DeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_next', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
    def choose_action(self, observation):
        if np.random.random() > self.epsilon:
            state = T.tensor(observation[np.newaxis, :], dtype=T.float, device=self.q_eval.device)
            actions = self.q_eval.forward(state)
            action = T.argmax(actions).item()
        else:
            action = np.random.choice(self.action_space)
        
        return action
    
    def learn(self):
        if self.memory.mem_cntr < self.batch_size:
            return
        self.q_eval.optimizer.zero_grad()
        
        self.replace_target_network()
        
        states, actions, rewards, states_, terminateds, truncateds = self.sample_memory()
        
        indices = np.arange(self.batch_size)
        
        q_pred = self.q_eval.forward(states)[indices, actions]
        q_next = self.q_next.forward(states_)

        q_eval = self.q_eval.forward(states_)
        
        max_actions = T.argmax(q_eval, dim=1)
        
        q_next[terminateds] = 0.0
        q_next[truncateds] = 0.0
        
        q_target = rewards + self.gamma*q_next[indices, max_actions]
        loss = self.q_eval.loss(q_target, q_pred).to(self.q_eval.device)
        loss.backward()
        
        self.q_eval.optimizer.step()
        self.learn_step_counter += 1
        
        self.decrement_epsilon()
        
class DuelingDQNAgent(Agent):
    def __init__(self, *args, **kargs):
        super(DuelingDQNAgent,self).__init__(*args, **kargs)
        
        self.q_eval = DuelingDeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_eval', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
        self.q_next = DuelingDeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_next', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
    
    def choose_action(self, observation):
        if np.random.random() > self.epsilon:
            state = T.tensor(observation[np.newaxis, :], dtype=T.float, device=self.q_eval.device)
            _, advantage = self.q_eval.forward(state)
            action = T.argmax(advantage).item()
        else:
            action = np.random.choice(self.action_space)
        
        return action
    
    def learn(self):
        if self.memory.mem_cntr < self.batch_size:
            return
        
        self.q_eval.optimizer.zero_grad()
        
        self.replace_target_network()
        
        states, actions, rewards, states_, terminateds, truncateds = self.sample_memory()
        
        indices = np.arange(self.batch_size)

        V_s, A_s = self.q_eval.forward(states)
        V_s_, A_s_ = self.q_eval.forward(states_)
        
        q_pred = T.add(V_s, (A_s - A_s.mean(dim=1, keepdim=True)))[indices, actions]
        q_next = T.add(V_s_, (A_s_ - A_s_.mean(dim=1, keepdim=True))).max(dim=1)[0]    
        
        q_next[terminateds] = 0.0
        q_next[truncateds] = 0.0
        
        q_target = rewards + self.gamma*q_next
        
        loss = self.q_eval.loss(q_target, q_pred).to(self.q_eval.device)
        loss.backward()
        self.q_eval.optimizer.step()
        self.learn_step_cntr += 1
        
        self.decrement_epsilon()
        
class DuelingDoubleDQNAgent(Agent):
    def __init__(self, *args, **kargs):
        super(DuelingDoubleDQNAgent,self).__init__(*args, **kargs)
        
        self.q_eval = DuelingDeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_eval', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
        
        self.q_next = DuelingDeepQNetwork(self.lr, self.n_actions, 
                                   name=self.env_name+'_'+self.algo+'_q_next', 
                                   input_dims=self.input_dims, 
                                   chkpt_dir=self.chkpt_dir)
    
    def choose_action(self, observation):
        if np.random.random() > self.epsilon:
            state = T.tensor([observation], dtype=T.float).to(self.q_eval.device)
            _, advantage = self.q_eval.forward(state)
            action = T.argmax(advantage).item()
        else:
            action = np.random.choice(self.action_space)
        
        return action
    
    def learn(self):
        if self.memory.mem_cntr < self.batch_size:
            return
        
        self.q_eval.optimizer.zero_grad()
        
        self.replace_target_network()
        
        states, actions, rewards, states_, terminateds, truncateds = self.sample_memory()
        
        indices = np.arange(self.batch_size)

        V_s, A_s = self.q_eval.forward(states)
        V_s_, A_s_ = self.q_eval.forward(states_)
        
        V_s_eval, A_s_eval = self.q_eval.forward(states_)

        
        q_pred = T.add(V_s, (A_s - A_s.mean(dim=1, keepdim=True)))[indices, actions]
        q_next = T.add(V_s_, (A_s_ - A_s_.mean(dim=1, keepdim=True)))
        
        q_eval = T.add(V_s_eval, (A_s_eval - A_s_eval.mean(dim=1, keepdim=True)))
        max_actions = T.argmax(q_eval, dim=1)
        
        q_next[terminateds] = 0.0
        q_next[truncateds] = 0.0
        
        q_target = rewards + self.gamma*q_next[indices, max_actions]
        
        loss = self.q_eval.loss(q_target, q_pred).to(self.q_eval.device)
        loss.backward()
        self.q_eval.optimizer.step()
        self.learn_step_cntr += 1
        
        self.decrement_epsilon()